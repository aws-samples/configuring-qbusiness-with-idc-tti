# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# pylint: disable=invalid-name,not-an-iterable,missing-function-docstring,logging-fstring-interpolation

"""Create a custom data source"""

import os
import logging
from pathlib import Path

from dotenv import dotenv_values
from rich.logging import RichHandler
from rich.pretty import pretty_repr
from qbapi_tools.api_helpers import QBusinessAPIHelpers
from qbapi_tools.datamodel import (
    ServiceConfig,
)

logger = logging.getLogger("qbapi_samples")
logger.addHandler(RichHandler(
    show_time=False, show_path=False, show_level=False, rich_tracebacks=False
))
logger.setLevel(logging.getLevelName(os.environ.get('logging', 'DEBUG')))

config = {
    **dotenv_values(dotenv_path=Path('./samples/.env').absolute()),
    **os.environ  # override loaded values with system env variables
}

DATA_BLOB = """
Why use trusted identity propagation?
Trusted identity propagation provides a mechanism that enables applications that authenticate outside of AWS to make requests on behalf of their users with the use of a trusted token issuer. Consider a client-server application that uses an external identity provider (IdP) to authenticate a user to provide access to an AWS resource that’s private to the user. For example, your web application might use Okta as an external IdP to authenticate a user to view their private conversations from Q Business. In this scenario, Q Business is unable to use the identity token generated by the third party provider to provide direct access to the user’s private data since there is no mechanism to trust the identity token issued by the third party.

To solve this, you can use IAM Identity Center to get the user identity from your external IdP into an AWS Identity and Access Management (IAM) role session which allows you to authorize requests based on the human, their attributes, and their group memberships, rather than set up fine-grained permissions in an IAM policy. You can exchange the token issued by the external IdP for a token generated by Identity Center. The token generated by Identity Center refers to the corresponding Identity Center user. The web application can now use the new token to initiate a request to Q Business for the private chat conversation. That token refers to the corresponding user in Identity Center, Q Business can authorize the requested access to the private conversation based on the user or their group membership as represented in Identity Center.

Some of the benefits of using trusted identity propagation are:
* Prevents user impersonation and protects against unauthorized access to user private data by spoofing user identity.
* Facilitates auditability and fosters responsible use of resources as Q Business automatically logs API invocations to AWS CloudTrail along with user identifier.
* Promotes software design principles rooted in user privacy.
"""


def create_custom_ds(app_id: str, index_id: str, region_name: str, name: str):
    """Create a custom data source"""
    logger.info(
        "\n[bold][u]Use Case: Create a custom data source[/]",
        extra={"markup": True}
    )
    logger.debug(f"Region Name: {region_name}")
    logger.debug(f"Application ID: {app_id}")
    logger.debug(f"Index ID: {index_id}")

    q_api_helper = QBusinessAPIHelpers(
        service_config=ServiceConfig(region_name=region_name)
    )
    return q_api_helper.create_custom_ds(
        app_id=app_id,
        index_id=index_id,
        name=name
    )


def delete_custom_ds(app_id: str, index_id: str, custom_ds_id: str, region_name: str):
    """Delete custom data source"""
    logger.info(
        "\n[bold][u]Use Case: Delete custom data source[/]",
        extra={"markup": True}
    )
    logger.debug(f"Region Name: {region_name}")
    logger.debug(f"Application ID: {app_id}")
    logger.debug(f"Index ID: {index_id}")
    logger.debug(f"Custom DS ID: {custom_ds_id}")

    q_api_helper = QBusinessAPIHelpers(
        service_config=ServiceConfig(region_name=region_name)
    )
    return q_api_helper.delete_ds(
        app_id=app_id,
        index_id=index_id,
        ds_id=custom_ds_id
    )


def custom_ds_sync_data(app_id: str, index_id: str, custom_ds_id: str, region_name: str):
    """sync data with custom data source"""
    logger.info(
        "\n[bold][u]Use Case: Create a custom data source[/]",
        extra={"markup": True}
    )
    logger.debug(f"Region Name: {region_name}")
    logger.debug(f"Application ID: {app_id}")
    logger.debug(f"Index ID: {index_id}")
    logger.debug(f"Custom Data Source ID: {custom_ds_id}")
    q_api_helper = QBusinessAPIHelpers(
        service_config=ServiceConfig(region_name=region_name)
    )
    sync_start_resp = q_api_helper.start_ds_sync_job(app_id, index_id, custom_ds_id)
    logger.debug(sync_start_resp)
    try:
        document = {
            "id": "demo-data-1",
            "attributes": [{"name": "_source_uri", "value": {"stringValue": "demo-custom-ds"}}],
            "content": {"blob": DATA_BLOB.encode('utf-8')},
            "contentType": "PLAIN_TEXT",
            "title": "Why use trusted identity propagation?",
            'accessConfiguration': {
                'accessControls': [
                    {
                        'principals': [
                            {
                                'user': {
                                    'id': 'tester@anycompany.com',
                                    'access': 'ALLOW',
                                    'membershipType': 'DATASOURCE'
                                }
                            },
                            {
                                'user': {
                                    'id': 'tester1@anycompany.com',
                                    'access': 'ALLOW',
                                    'membershipType': 'DATASOURCE'
                                }
                            }
                        ]
                    },
                ]
            }
        }
        resp = q_api_helper.put_documents(
            app_id, index_id, custom_ds_id,
            sync_start_resp.executionId,
            [document]
        )
        logger.debug(pretty_repr(resp))
    except Exception as ex:
        logger.exception(ex)
    q_api_helper.stop_ds_sync_job(app_id, index_id, custom_ds_id)


def main():
    """Demonstrate custom data source"""
    region_name = config.get(
        "region_name",
        config.get('AWS_DEFAULT_REGION', 'us-east-1')
    )

    app_id = config.get("app_id", None)
    if not app_id:
        raise ValueError("Missing Q Business application app_id.")

    index_id = config.get("index_id", None)
    if not index_id:
        raise ValueError("Missing index_id.")

    create_ds = config.get("create_custom_ds", "false").lower() == "true"
    delete_ds = config.get("delete_custom_ds", "false").lower() == "true"
    custom_ds_id = config.get("custom_ds_id", None)

    if not custom_ds_id and create_ds:
        # Create new custom data source
        resp = create_custom_ds(app_id, index_id, region_name, "demo-custom-ds")
        logger.debug(resp)
        custom_ds_id = resp.dataSourceId

    if not custom_ds_id:
        raise ValueError("Missing custom_ds_id.")

    if delete_ds:
        # Delete custom data source
        delete_custom_ds(app_id, index_id, custom_ds_id, region_name)
    else:
        # sync data
        custom_ds_sync_data(app_id, index_id, custom_ds_id, region_name)


if __name__ == "__main__":
    main()
